#content_detail.ui-corner-all.ui-widget-content
  h1.title
    = t('activerecord.models.message')
  #content_list
    p#notice
      = notice
    = form_for :messages, url: messages_path, html: {method: 'get'} do
      p
        = label_tag :search_form_top, t('page.search_term')
        | : 
        = search_field_tag 'query', h(@query), {id: 'search_form_top', class: 'search_form', placeholder: t('page.search_term')}
        = submit_tag t('page.search')
      = form_for :message, url: destroy_selected_messages_path do |form|
        table.table.table-striped.index
          tr
            th
            th
              = t('activerecord.attributes.message.subject')
            th
              = t('activerecord.attributes.message.sender')
            th
              = t('message.sent_at')
          - @messages.each do |message|
            |  <tr class="line
            = cycle("0", "1")
            | "> 
            td
              - if policy(message).destroy?
                |  <input id="delete_
                =h message.id
                | " name="delete[]" type="checkbox" value="
                =h message.id
                | " class="checkbox" /> 
            td
              - unless message.read?
              strong
          = link_to message.subject, message
          - unless message.read?
      td
        = link_to message.sender.username, message.sender.profile if message.sender.try(:profile)
      td
        = l(message.created_at)
      tr
        td[colspan="4"]
          = submit_tag t('message.delete')
      = paginate(@messages)
#submenu.ui-corner-all.ui-widget-content
  ul
    - mode = params[:mode].to_s
    li
      - if mode == 'unread'
        strong
          = link_to t('message.unread'), url_for(params.merge(page: nil, mode: 'unread', only_path: true))
          |  (
          = @message_facet['false'].to_i
          | ) 
          - if mode == 'unread'
    li
      - if mode == 'read'
        strong
          = link_to t('message.read'), url_for(params.merge(page: nil, mode: 'read', only_path: true))
          |  (
          = @message_facet['true'].to_i
          | ) 
          - if mode == 'read'
    - if mode.present?
      li
        = link_to t('page.remove_this_facet'), url_for(params.merge(mode: nil, page: nil, only_path: true))
  ul
    - if policy(Message).create?
      li
        = link_to t('page.new', model: t('activerecord.models.message')), new_message_path
